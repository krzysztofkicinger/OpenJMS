/**
 * Redistribution and use of this software and associated documentation
 * ("Software"), with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1. Redistributions of source code must retain copyright
 *    statements and notices.  Redistributions must also contain a
 *    copy of this document.
 *
 * 2. Redistributions in binary form must reproduce the
 *    above copyright notice, this list of conditions and the
 *    following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. The name "Exolab" must not be used to endorse or promote
 *    products derived from this Software without prior written
 *    permission of Exoffice Technologies.  For written permission,
 *    please contact info@exolab.org.
 *
 * 4. Products derived from this Software may not be called "Exolab"
 *    nor may "Exolab" appear in their names without prior written
 *    permission of Exoffice Technologies. Exolab is a registered
 *    trademark of Exoffice Technologies.
 *
 * 5. Due credit should be given to the Exolab Project
 *    (http://www.exolab.org/).
 *
 * THIS SOFTWARE IS PROVIDED BY EXOFFICE TECHNOLOGIES AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * EXOFFICE TECHNOLOGIES OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Copyright 2000 (C) Exoffice Technologies Inc. All Rights Reserved.
 *
 * $Id: DealTable.java,v 1.3 2000/05/14 23:20:15 mourikis Exp $
 *
 * Date         Author  Changes
 * $Date	    jimm    Created
 */


package openjms.examples.client.fx.dealblotter;

import java.lang.Double;
import java.lang.String;
import java.util.Date;
import javax.swing.JTable;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel; 
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.border.TitledBorder;
import javax.swing.border.EtchedBorder;
import java.awt.Color;

/**
 * Construct a dealTable appropriate for display the FxDeals, generated by the
 * dealCapture.
 *
 * @version     $Revision: 1.3 $ $Date: 2000/05/14 23:20:15 $
 * @author      <a href="mailto:mourikis@exolab.org">Jim Mourikis</a>
 * @see         openjms.examples.client.fx.dealcapture.DealCapture
 * @see			openjms.examples.client.fx.deals.Deals
 *
 **/


public class DealTable extends JTable
{
	// The column title headers.
	private String[]		header_;

	// The underlying data structure holding the array.
	private Object[][]		data_;

	// An array identifying the object type for each column.
	private Class[]			types_;

	// The underlying model that displays the data.
	DealTableModel			model_;
	
	
	/**
	 * The default constructor initialise the underlying table. And constructs
	 * an array of column headers. The table is configured appropriately
	 * for display of deal types.
	 *
	 */
	public DealTable()
	{
		header_ = new String[]
		{
			"Deal Type", "Value Date", "Trading Date", "C1", "Buy/Sell1",
			"Amount1", "C2", "Buy/Sell2", "Amount2", "Spot Rate", "Market Rate"
		};

		data_ = new Object[0][header_.length];

		types_= new Class[]
		{
			String.class,
			Date.class,
			Date.class,
			String.class,
			String.class,
			String.class,
			String.class,
			String.class,
			String.class,
			String.class,
			String.class
		};
		setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		setBorder(new EtchedBorder());
		setShowVerticalLines (false);
		setRowSelectionAllowed (false);
		setBackground(Color.pink);
		model_ = new DealTableModel(data_, header_, types_);
		setModel(model_);
		getColumn("C1").setPreferredWidth(40);
		getColumn("C2").setPreferredWidth(40);
		getColumn("Amount1").setPreferredWidth(100);
		getColumn("Amount2").setPreferredWidth(100);
		
		((DefaultTableCellRenderer)getDefaultRenderer(Date.class)).
			setHorizontalAlignment(JLabel.CENTER);
		((DefaultTableCellRenderer)getDefaultRenderer(String.class)).
			setHorizontalAlignment(JLabel.CENTER);
	}

	/**
	 * A new row of data has arrived. Add the data to the table.
	 *
	 * @param Object[] The row of data.
	 *
	 */
	void addRow(Object[] data)
	{
		model_.addRow(data);
	}


	/**
	 * Return the number of columns available.
	 *
	 * @return The number of columns
	 *
	 */
	int getNumColumns()
	{
		return header_.length;
	}
	


	/**
	 * Remove all deals from the deal table.
	 *
	 */
	void removeDeals()
	{
		model_.removeDeals();
		model_.fireTableDataChanged();
	}
	
		 
	
} // End DealTable
